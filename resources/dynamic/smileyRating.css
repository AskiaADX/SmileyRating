{%

	dim baseSecondaryColour = CurrentADC.PropValue("secondaryColor")
	dim basePrimaryColour = CurrentADC.PropValue("primaryColor")
	dim dkbasePrimaryColour = CurrentADC.PropValue("dkprimaryColor")
	dim dkhoverbasePrimaryColour = CurrentADC.PropValue("dkhoverprimaryColor")
	dim dkselectedbasePrimaryColour = CurrentADC.PropValue("dkselectedprimaryColor")
	dim borderSize = CurrentADC.PropValue("backgroundBorderSize")
	dim borderColor = CurrentADC.PropValue("backgroundBorderColor")
	dim borderStyle = CurrentADC.PropValue("backgroundBorderStyle")

%}
#adc_{%= CurrentADC.InstanceId %} {
	height:100%;
	padding:{%:=CurrentADC.PropValue("controlpadding")%};
	width:100%;
}

#adc_{%= CurrentADC.InstanceId %}.hidden {
	visibility:hidden;
}


#adc_{%= CurrentADC.InstanceId %}  .tooltip {
	margin-left: -999em;
	position: absolute;
	padding: {%:=CurrentADC.PropValue("tooltippadding")%};

}

#adc_{%= CurrentADC.InstanceId %} .tooltiphover {
	{%
	If CurrentADC.PropValue("showTooltips") = "yes" Then
		%}
	font-size: {%:=CurrentADC.PropValue("tooltipFontSize")%};
	color: rgb({%:=CurrentADC.PropValue("tooltipFontColour")%});
/*------------------------------------------- radius -------------------------------------------*/
	-webkit-border-radius: {%:=CurrentADC.PropValue("tooltipCurvedCorners")%};
       -moz-border-radius: {%:=CurrentADC.PropValue("tooltipCurvedCorners")%};
        -ms-border-radius: {%:=CurrentADC.PropValue("tooltipCurvedCorners")%};
         -o-border-radius: {%:=CurrentADC.PropValue("tooltipCurvedCorners")%};
            border-radius: {%:=CurrentADC.PropValue("tooltipCurvedCorners")%};
/*------------------------------------------- gradient -------------------------------------------*/
	background-color: rgb({%:=CurrentADC.PropValue("tooltipColourPrimary")%});
	
	border: rgb({%:=CurrentADC.PropValue("tooltipBorderColour")%}) {%:=CurrentADC.PropValue("tooltipBorderThickness")%} {%:=CurrentADC.PropValue("tooltipBorderStyle")%};
		{%
	EndIf
	%}
}

#adc_{%= CurrentADC.InstanceId %} .answerContent{
	{%
	If CurrentADC.PropValue("controlAlignment") = "center" Then
		%}
		margin-left:auto;
		margin-right:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "right" Then
		%}
		margin-left:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "left" Then
		%}
		margin-right:auto;
		{%
	EndIf
	%}
}

#adc_{%= CurrentADC.InstanceId %} .answers {
	position:relative;
	overflow:hidden;
	border: rgb({%:=borderColor%}) {%:=borderStyle%} {%:=borderSize%};
	max-width:100%;
	{%
	If CurrentADC.PropValue("controlAlignment") = "center" Then
		%}
		margin-left:auto;
		margin-right:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "right" Then
		%}
		margin-left:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "left" Then
		%}
		margin-right:auto;
		{%
	EndIf
	%}
}


#adc_{%= CurrentADC.InstanceId %} .gradientSection {
	width:100%;
	height:100%;
	position:relative;
}

#adc_{%= CurrentADC.InstanceId %} .gradient{
	background: rgb({%=basePrimaryColour%});
	background: -moz-linear-gradient( top,  rgba({%=basePrimaryColour%},0.9) 0%, rgba({%=baseSecondaryColour%},0.9) 100%);
	background: -webkit-gradient( linear, top, bottom, color-stop(0%,rgba({%=basePrimaryColour%},0.9)), color-stop(100%,rgba({%=baseSecondaryColour%},0.9)));
	background: -webkit-linear-gradient( top,  rgba({%=basePrimaryColour%},0.9) 0%,rgba({%=baseSecondaryColour%},0.9) 100%);
	background: -o-linear-gradient( top,  rgba({%=basePrimaryColour%},0.9) 0%,rgba({%=baseSecondaryColour%},0.9) 100%);
	background: -ms-linear-gradient( top,  rgba({%=basePrimaryColour%},0.9) 0%,rgba({%=baseSecondaryColour%},0.9) 100%);
	background: linear-gradient( top, rgba({%=basePrimaryColour%},0.9) 0%,rgba({%=baseSecondaryColour%},0.9) 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%=basePrimaryColour.ToHexa()%}, endColorstr={%=baseSecondaryColour.ToHexa()%},GradientType=0 );
    zoom:1;
}

#adc_{%= CurrentADC.InstanceId %} .nogradient{
	background: rgb({%=basePrimaryColour%});
    zoom:1;
}

#adc_{%= CurrentADC.InstanceId %} .gradientHorizontal{
	background: rgb({%=basePrimaryColour%});
	background: -moz-linear-gradient( left,  rgba({%=baseSecondaryColour%},0.9) 0%, rgba({%=basePrimaryColour%},0.9) 100%);
	background: -webkit-gradient( linear, left, right, color-stop(0%,rgba({%=baseSecondaryColour%},0.9)), color-stop(100%,rgba({%=basePrimaryColour%},0.9)));
	background: -webkit-linear-gradient( left,  rgba({%=baseSecondaryColour%},0.9) 0%,rgba({%=basePrimaryColour%},0.9) 100%);
	background: -o-linear-gradient( left,  rgba({%=baseSecondaryColour%},0.9) 0%,rgba({%=basePrimaryColour%},0.9) 100%);
	background: -ms-linear-gradient( left,  rgba({%=baseSecondaryColour%},0.9) 0%,rgba({%=basePrimaryColour%},0.9) 100%);
	background: linear-gradient( left, rgba({%=baseSecondaryColour%},0.9) 0%,rgba({%=basePrimaryColour%},0.9) 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%=baseSecondaryColour.ToHexa()%}, endColorstr={%=basePrimaryColour.ToHexa()%},GradientType=1 );
    zoom:1;
}

#adc_{%= CurrentADC.InstanceId %} .radius {
	-webkit-border-radius: {%:=CurrentADC.PropValue("borderRadius")%};
       -moz-border-radius: {%:=CurrentADC.PropValue("borderRadius")%};
        -ms-border-radius: {%:=CurrentADC.PropValue("borderRadius")%};
         -o-border-radius: {%:=CurrentADC.PropValue("borderRadius")%};
            border-radius: {%:=CurrentADC.PropValue("borderRadius")%};
}

#adc_{%= CurrentADC.InstanceId %} .dkradius {
	-webkit-border-radius: {%:=CurrentADC.PropValue("dkborderRadius")%};
       -moz-border-radius: {%:=CurrentADC.PropValue("dkborderRadius")%};
        -ms-border-radius: {%:=CurrentADC.PropValue("dkborderRadius")%};
         -o-border-radius: {%:=CurrentADC.PropValue("dkborderRadius")%};
            border-radius: {%:=CurrentADC.PropValue("dkborderRadius")%};
}


#adc_{%= CurrentADC.InstanceId %} .smileysSection {
	position:relative;
	height:{%:=CurrentADC.PropValue("controlheight")%};
	max-width:100%;
	{%
	If CurrentADC.PropValue("controlAlignment") = "center" Then
		%}
		margin-left:auto;
		margin-right:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "right" Then
		%}
		margin-left:auto;
		{%
	ElseIf CurrentADC.PropValue("controlAlignment") = "left" Then
		%}
		margin-right:auto;
		{%
	EndIf
	%}
}

#adc_{%= CurrentADC.InstanceId %} .smileysSection img {
	position:absolute;
	vertical-align: middle;
	min-width:{%:=CurrentADC.PropValue("smileyminwidth")%};
}

#adc_{%= CurrentADC.InstanceId %} .smileysSection .dkdiv {
	padding:{%:=CurrentADC.PropValue("DKpadding")%};
	margin:{%:=CurrentADC.PropValue("DKmargin")%};
	position:absolute;
    background-color: rgb({%=dkbasePrimaryColour%});
	color:rgb({%:=CurrentADC.PropValue("dkfontColor")%});
	border:rgb({%:=CurrentADC.PropValue("dkborderColor")%}) {%:=CurrentADC.PropValue("dkborderStyle")%} {%:=CurrentADC.PropValue("dkborderSize")%};
    -webkit-box-shadow: {%:= CurrentADC.PropValue("dkshadow") %};
	-moz-box-shadow: {%:= CurrentADC.PropValue("dkshadow") %};
	box-shadow: {%:= CurrentADC.PropValue("dkshadow") %};
	vertical-align: middle;
    white-space: nowrap;
    text-align:center;
    overflow: hidden;
    cursor:pointer;
    font-size:{%:=CurrentADC.PropValue("dkfontSize")%};
    line-height:{%= Theme.LineHeight %};
}
#adc_{%= CurrentADC.InstanceId %} .smileysSection .dkdiv:hover {
    background-color: rgb({%= dkhoverbasePrimaryColour %});
	color:rgb({%:=CurrentADC.PropValue("dkhoverfontColor")%});
	border:rgb({%:=CurrentADC.PropValue("dkhoverborderColor")%}) {%:=CurrentADC.PropValue("dkhoverborderStyle")%} {%:=CurrentADC.PropValue("dkhoverborderSize")%};
    -webkit-box-shadow: {%:= CurrentADC.PropValue("dkhovershadow") %};
	-moz-box-shadow: {%:= CurrentADC.PropValue("dkhovershadow") %};
	box-shadow: {%:= CurrentADC.PropValue("dkhovershadow") %};
}


#adc_{%= CurrentADC.InstanceId %} .smileysSection .dkdiv.dkselected {
    background-color: rgb({%= dkselectedbasePrimaryColour %});
	color:rgb({%:=CurrentADC.PropValue("dkselectedfontColor")%});
	border:rgb({%:=CurrentADC.PropValue("dkselectedborderColor")%}) {%:=CurrentADC.PropValue("dkselectedborderStyle")%} {%:=CurrentADC.PropValue("dkselectedborderSize")%};
    -webkit-box-shadow: {%:= CurrentADC.PropValue("dkselectedshadow") %};
	-moz-box-shadow: {%:= CurrentADC.PropValue("dkselectedshadow") %};
	box-shadow: {%:= CurrentADC.PropValue("dkselectedshadow") %};
}

#adc_{%= CurrentADC.InstanceId %} .smileyratingquestion {
	color: rgb({%:=CurrentADC.PropValue("fontColor")%});
	font-style:{%:=CurrentADC.PropValue("fontStyle")%};
	font-size:{%:=CurrentADC.PropValue("fontSize")%};
}

#adc_{%= CurrentADC.InstanceId %} .smileyratingquestion img{
	padding: {%:=CurrentADC.PropValue("imagePadding")%};
	{%
	If CurrentADC.PropValue("forceImageSize") = "both" Then
		%}
		max-width: {%:=CurrentADC.PropValue("maxImageWidth")%};
		max-height: {%:=CurrentADC.PropValue("maxImageHeight")%};
		{%
	ElseIf CurrentADC.PropValue("forceImageSize") = "width" Then
		%}
		max-width: {%:=CurrentADC.PropValue("maxImageWidth")%};
		{%
	ElseIf CurrentADC.PropValue("forceImageSize") = "height" Then
		%}
		max-height: {%:=CurrentADC.PropValue("maxImageHeight")%};
		{%
	EndIF
	%}

}
